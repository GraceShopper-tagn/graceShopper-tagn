generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id              Int         @id @default(autoincrement())
  firstname       String      @db.VarChar(255)
  lastname        String      @db.VarChar(255)
  username        String      @unique @db.VarChar(255)
  email           String      @unique @db.VarChar(255)
  shippingaddress String?     @db.VarChar(255)
  billingaddress  String?     @db.VarChar(255)
  paymentinfo     String?     @db.VarChar(255)
  isadmin         Boolean?    @default(false)
  createddate     DateTime    @default(dbgenerated("CURRENT_DATE")) @db.Date
  favorites       favorites[]
  orders          orders[]
  reviews         reviews[]
}

model cartitems {
  id        Int       @id @default(autoincrement())
  orderid   Int?
  productid Int?
  quantity  Int       @default(1)
  subtotal  Float?    @default(0.0)
  orders    orders?   @relation(fields: [orderid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products  products? @relation(fields: [productid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model categories {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  tags tags[]
}

model discounts {
  id         Int        @id @default(autoincrement())
  name       String     @unique @db.VarChar(255)
  percent    Float
  couponcode String     @unique @db.VarChar(255)
  orders     orders[]
  products   products[]
}

model favorites {
  id            Int       @id @default(autoincrement())
  userid        Int?
  productid     Int?
  favoriteddate DateTime  @default(dbgenerated("CURRENT_DATE")) @db.Date
  products      products? @relation(fields: [productid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users?    @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id              Int         @id @default(autoincrement())
  discountid      Int?
  userid          Int?
  shippingaddress String?     @db.VarChar(255)
  billingaddress  String?     @db.VarChar(255)
  fulfilled       Boolean?    @default(false)
  paymentinfo     String?     @db.VarChar(255)
  subtotal        Float       @default(0.0)
  tax             Float       @default(0.0)
  total           Float       @default(0.0)
  orderdate       DateTime    @default(dbgenerated("CURRENT_DATE")) @db.Date
  discounts       discounts?  @relation(fields: [discountid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           users?      @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cartitems       cartitems[]
}

model photos {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  url           String          @db.VarChar(255)
  productphotos productphotos[]
}

model productphotos {
  id        Int       @id @default(autoincrement())
  productid Int?
  photoid   Int?
  photos    photos?   @relation(fields: [photoid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products  products? @relation(fields: [productid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model products {
  id            Int             @id @default(autoincrement())
  name          String?         @db.VarChar(255)
  description   String?         @db.VarChar(255)
  price         Float
  discountid    Int?
  createddate   DateTime        @default(dbgenerated("CURRENT_DATE")) @db.Date
  numbersold    Int             @default(0)
  rating        Float?          @default(5.0)
  discounts     discounts?      @relation(fields: [discountid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cartitems     cartitems[]
  favorites     favorites[]
  productphotos productphotos[]
  productsizes  productsizes[]
  producttags   producttags[]
  reviews       reviews[]
}

model productsizes {
  id        Int       @id @default(autoincrement())
  productid Int?
  sizeid    Int?
  inventory Int       @default(0)
  products  products? @relation(fields: [productid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sizes     sizes?    @relation(fields: [sizeid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model producttags {
  id        Int       @id @default(autoincrement())
  productid Int?
  tagid     Int?
  products  products? @relation(fields: [productid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags      tags?     @relation(fields: [tagid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reviews {
  id        Int       @id @default(autoincrement())
  userid    Int?
  productid Int?
  rating    Int
  content   String    @db.VarChar(255)
  products  products? @relation(fields: [productid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     users?    @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sizes {
  id           Int            @id @default(autoincrement())
  size         Float          @unique
  productsizes productsizes[]
}

model tags {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(255)
  categoryid  Int?
  categories  categories?   @relation(fields: [categoryid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  producttags producttags[]
}
